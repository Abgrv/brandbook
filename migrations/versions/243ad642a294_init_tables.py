"""init tables

Revision ID: 243ad642a294
Revises: 
Create Date: 2025-08-13 20:58:11.579009

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '243ad642a294'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('brandbooks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('slug', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('slug')
    )
    op.create_table('sections',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('brandbook_id', sa.UUID(), nullable=True),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['brandbook_id'], ['brandbooks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('uploaded_files',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('brandbook_id', sa.UUID(), nullable=True),
    sa.Column('file_url', sa.String(), nullable=False),
    sa.Column('file_type', sa.String(), nullable=True),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['brandbook_id'], ['brandbooks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index(op.f('foodgram_recipe_tags_recipe_id_66e55bc3'), table_name='foodgram_recipe_tags')
    op.drop_index(op.f('foodgram_recipe_tags_tag_id_5e0c30c1'), table_name='foodgram_recipe_tags')
    op.drop_table('foodgram_recipe_tags')
    op.drop_index(op.f('auth_permission_content_type_id_2f476e4b'), table_name='auth_permission')
    op.drop_table('auth_permission')
    op.drop_index(op.f('users_user_user_permissions_permission_id_0b93982e'), table_name='users_user_user_permissions')
    op.drop_index(op.f('users_user_user_permissions_user_id_20aca447'), table_name='users_user_user_permissions')
    op.drop_table('users_user_user_permissions')
    op.drop_index(op.f('foodgram_shoppingcart_recipe_id_ca9d982b'), table_name='foodgram_shoppingcart')
    op.drop_index(op.f('foodgram_shoppingcart_user_id_2270a2ea'), table_name='foodgram_shoppingcart')
    op.drop_table('foodgram_shoppingcart')
    op.drop_index(op.f('auth_group_name_a6ea08ec_like'), table_name='auth_group', postgresql_ops={'name': 'varchar_pattern_ops'})
    op.drop_table('auth_group')
    op.drop_table('foodgram_ingredient')
    op.drop_index(op.f('foodgram_tag_color_f774ad31_like'), table_name='foodgram_tag', postgresql_ops={'color': 'varchar_pattern_ops'})
    op.drop_index(op.f('foodgram_tag_name_e98998b6_like'), table_name='foodgram_tag', postgresql_ops={'name': 'varchar_pattern_ops'})
    op.drop_index(op.f('foodgram_tag_slug_cd05fe38_like'), table_name='foodgram_tag', postgresql_ops={'slug': 'varchar_pattern_ops'})
    op.drop_table('foodgram_tag')
    op.drop_table('django_migrations')
    op.drop_table('foodgram_follow')
    op.drop_table('django_content_type')
    op.drop_index(op.f('foodgram_ingredienttorecipe_ingredient_id_fa91ce77'), table_name='foodgram_ingredienttorecipe')
    op.drop_index(op.f('foodgram_ingredienttorecipe_recipe_id_2933c46c'), table_name='foodgram_ingredienttorecipe')
    op.drop_table('foodgram_ingredienttorecipe')
    op.drop_index(op.f('users_user_groups_group_id_9afc8d0e'), table_name='users_user_groups')
    op.drop_index(op.f('users_user_groups_user_id_5f6f5a90'), table_name='users_user_groups')
    op.drop_table('users_user_groups')
    op.drop_index(op.f('users_user_email_243f6e77_like'), table_name='users_user', postgresql_ops={'email': 'varchar_pattern_ops'})
    op.drop_index(op.f('users_user_username_06e46fe6_like'), table_name='users_user', postgresql_ops={'username': 'varchar_pattern_ops'})
    op.drop_table('users_user')
    op.drop_index(op.f('auth_group_permissions_group_id_b120cbf9'), table_name='auth_group_permissions')
    op.drop_index(op.f('auth_group_permissions_permission_id_84c5c92e'), table_name='auth_group_permissions')
    op.drop_table('auth_group_permissions')
    op.drop_index(op.f('foodgram_recipe_author_id_57f9899c'), table_name='foodgram_recipe')
    op.drop_table('foodgram_recipe')
    op.drop_index(op.f('authtoken_token_key_10f0b77e_like'), table_name='authtoken_token', postgresql_ops={'key': 'varchar_pattern_ops'})
    op.drop_table('authtoken_token')
    op.drop_index(op.f('foodgram_favorite_recipe_id_56a4ad2d'), table_name='foodgram_favorite')
    op.drop_index(op.f('foodgram_favorite_user_id_0981e2f4'), table_name='foodgram_favorite')
    op.drop_table('foodgram_favorite')
    op.drop_index(op.f('users_follow_author_id_c48003a4'), table_name='users_follow')
    op.drop_index(op.f('users_follow_user_id_e66dc3cf'), table_name='users_follow')
    op.drop_table('users_follow')
    op.drop_index(op.f('django_admin_log_content_type_id_c4bce8eb'), table_name='django_admin_log')
    op.drop_index(op.f('django_admin_log_user_id_c564eba6'), table_name='django_admin_log')
    op.drop_table('django_admin_log')
    op.drop_table('foodgram_recipetag')
    op.add_column('users', sa.Column('password_hash', sa.String(), nullable=False))
    op.add_column('users', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.alter_column('users', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.create_unique_constraint(None, 'users', ['email'])
    op.drop_column('users', 'is_superuser')
    op.drop_column('users', 'date_joined')
    op.drop_column('users', 'last_login')
    op.drop_column('users', 'username')
    op.drop_column('users', 'is_staff')
    op.drop_column('users', 'password')
    op.drop_column('users', 'is_active')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('password', sa.VARCHAR(length=128), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('is_staff', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('username', sa.VARCHAR(length=150), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('date_joined', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='unique')
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'password_hash')
    op.create_table('foodgram_recipetag',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('foodgram_recipetag_pkey'))
    )
    op.create_table('django_admin_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('action_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('object_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('object_repr', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('action_flag', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('change_message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.CheckConstraint('action_flag >= 0', name=op.f('django_admin_log_action_flag_check')),
    sa.ForeignKeyConstraint(['content_type_id'], ['django_content_type.id'], name=op.f('django_admin_log_content_type_id_c4bce8eb_fk_django_co'), initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users_user.id'], name=op.f('django_admin_log_user_id_c564eba6_fk_users_user_id'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('django_admin_log_pkey'))
    )
    op.create_index(op.f('django_admin_log_user_id_c564eba6'), 'django_admin_log', ['user_id'], unique=False)
    op.create_index(op.f('django_admin_log_content_type_id_c4bce8eb'), 'django_admin_log', ['content_type_id'], unique=False)
    op.create_table('users_follow',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('author_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users_user.id'], name=op.f('users_follow_author_id_c48003a4_fk_users_user_id'), initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users_user.id'], name=op.f('users_follow_user_id_e66dc3cf_fk_users_user_id'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_follow_pkey')),
    sa.UniqueConstraint('author_id', 'user_id', name=op.f('unique_follower'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('users_follow_user_id_e66dc3cf'), 'users_follow', ['user_id'], unique=False)
    op.create_index(op.f('users_follow_author_id_c48003a4'), 'users_follow', ['author_id'], unique=False)
    op.create_table('foodgram_favorite',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('date_added', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('recipe_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['recipe_id'], ['foodgram_recipe.id'], name=op.f('foodgram_favorite_recipe_id_56a4ad2d_fk_foodgram_recipe_id'), initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users_user.id'], name=op.f('foodgram_favorite_user_id_0981e2f4_fk_users_user_id'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('foodgram_favorite_pkey')),
    sa.UniqueConstraint('user_id', 'recipe_id', name=op.f('user_favorite_unique'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('foodgram_favorite_user_id_0981e2f4'), 'foodgram_favorite', ['user_id'], unique=False)
    op.create_index(op.f('foodgram_favorite_recipe_id_56a4ad2d'), 'foodgram_favorite', ['recipe_id'], unique=False)
    op.create_table('authtoken_token',
    sa.Column('key', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users_user.id'], name=op.f('authtoken_token_user_id_35299eff_fk_users_user_id'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('key', name=op.f('authtoken_token_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('authtoken_token_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('authtoken_token_key_10f0b77e_like'), 'authtoken_token', ['key'], unique=False, postgresql_ops={'key': 'varchar_pattern_ops'})
    op.create_table('foodgram_recipe',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('foodgram_recipe_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('image', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('cooking_time', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('pub_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.CheckConstraint('cooking_time >= 0', name='foodgram_recipe_cooking_time_check'),
    sa.ForeignKeyConstraint(['author_id'], ['users_user.id'], name='foodgram_recipe_author_id_57f9899c_fk_users_user_id', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name='foodgram_recipe_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('foodgram_recipe_author_id_57f9899c'), 'foodgram_recipe', ['author_id'], unique=False)
    op.create_table('auth_group_permissions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['auth_group.id'], name=op.f('auth_group_permissions_group_id_b120cbf9_fk_auth_group_id'), initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['auth_permission.id'], name=op.f('auth_group_permissio_permission_id_84c5c92e_fk_auth_perm'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('auth_group_permissions_pkey')),
    sa.UniqueConstraint('group_id', 'permission_id', name=op.f('auth_group_permissions_group_id_permission_id_0cd325b0_uniq'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('auth_group_permissions_permission_id_84c5c92e'), 'auth_group_permissions', ['permission_id'], unique=False)
    op.create_index(op.f('auth_group_permissions_group_id_b120cbf9'), 'auth_group_permissions', ['group_id'], unique=False)
    op.create_table('users_user',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('users_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('password', sa.VARCHAR(length=128), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('is_staff', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('date_joined', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=254), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_user_pkey'),
    sa.UniqueConstraint('email', name='users_user_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', 'email', name='unique_user', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', name='users_user_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('users_user_username_06e46fe6_like'), 'users_user', ['username'], unique=False, postgresql_ops={'username': 'varchar_pattern_ops'})
    op.create_index(op.f('users_user_email_243f6e77_like'), 'users_user', ['email'], unique=False, postgresql_ops={'email': 'varchar_pattern_ops'})
    op.create_table('users_user_groups',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['auth_group.id'], name=op.f('users_user_groups_group_id_9afc8d0e_fk_auth_group_id'), initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users_user.id'], name=op.f('users_user_groups_user_id_5f6f5a90_fk_users_user_id'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_user_groups_pkey')),
    sa.UniqueConstraint('user_id', 'group_id', name=op.f('users_user_groups_user_id_group_id_b88eab82_uniq'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('users_user_groups_user_id_5f6f5a90'), 'users_user_groups', ['user_id'], unique=False)
    op.create_index(op.f('users_user_groups_group_id_9afc8d0e'), 'users_user_groups', ['group_id'], unique=False)
    op.create_table('foodgram_ingredienttorecipe',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('amount', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('ingredient_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('recipe_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.CheckConstraint('amount >= 0', name=op.f('foodgram_ingredienttorecipe_amount_check')),
    sa.ForeignKeyConstraint(['ingredient_id'], ['foodgram_ingredient.id'], name=op.f('foodgram_ingredientt_ingredient_id_fa91ce77_fk_foodgram_'), initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['recipe_id'], ['foodgram_recipe.id'], name=op.f('foodgram_ingredientt_recipe_id_2933c46c_fk_foodgram_'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('foodgram_ingredienttorecipe_pkey'))
    )
    op.create_index(op.f('foodgram_ingredienttorecipe_recipe_id_2933c46c'), 'foodgram_ingredienttorecipe', ['recipe_id'], unique=False)
    op.create_index(op.f('foodgram_ingredienttorecipe_ingredient_id_fa91ce77'), 'foodgram_ingredienttorecipe', ['ingredient_id'], unique=False)
    op.create_table('django_content_type',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('django_content_type_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('app_label', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('model', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='django_content_type_pkey'),
    sa.UniqueConstraint('app_label', 'model', name='django_content_type_app_label_model_76bd3d3b_uniq', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('foodgram_follow',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('foodgram_follow_pkey'))
    )
    op.create_table('django_migrations',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('app', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('applied', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('django_migrations_pkey'))
    )
    op.create_table('foodgram_tag',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('foodgram_tag_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('color', sa.VARCHAR(length=18), autoincrement=False, nullable=False),
    sa.Column('slug', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='foodgram_tag_pkey'),
    sa.UniqueConstraint('color', name='foodgram_tag_color_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('name', name='foodgram_tag_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('slug', name='foodgram_tag_slug_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('foodgram_tag_slug_cd05fe38_like'), 'foodgram_tag', ['slug'], unique=False, postgresql_ops={'slug': 'varchar_pattern_ops'})
    op.create_index(op.f('foodgram_tag_name_e98998b6_like'), 'foodgram_tag', ['name'], unique=False, postgresql_ops={'name': 'varchar_pattern_ops'})
    op.create_index(op.f('foodgram_tag_color_f774ad31_like'), 'foodgram_tag', ['color'], unique=False, postgresql_ops={'color': 'varchar_pattern_ops'})
    op.create_table('foodgram_ingredient',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('measurement_unit', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('foodgram_ingredient_pkey')),
    sa.UniqueConstraint('name', 'measurement_unit', name=op.f('foodgram_ingredient_name_measurement_unit_6697ac32_uniq'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('auth_group',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('auth_group_pkey')),
    sa.UniqueConstraint('name', name=op.f('auth_group_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('auth_group_name_a6ea08ec_like'), 'auth_group', ['name'], unique=False, postgresql_ops={'name': 'varchar_pattern_ops'})
    op.create_table('foodgram_shoppingcart',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('date_added', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('recipe_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['recipe_id'], ['foodgram_recipe.id'], name=op.f('foodgram_shoppingcart_recipe_id_ca9d982b_fk_foodgram_recipe_id'), initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users_user.id'], name=op.f('foodgram_shoppingcart_user_id_2270a2ea_fk_users_user_id'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('foodgram_shoppingcart_pkey')),
    sa.UniqueConstraint('user_id', 'recipe_id', name=op.f('user_shopping_unique'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('foodgram_shoppingcart_user_id_2270a2ea'), 'foodgram_shoppingcart', ['user_id'], unique=False)
    op.create_index(op.f('foodgram_shoppingcart_recipe_id_ca9d982b'), 'foodgram_shoppingcart', ['recipe_id'], unique=False)
    op.create_table('users_user_user_permissions',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['auth_permission.id'], name=op.f('users_user_user_perm_permission_id_0b93982e_fk_auth_perm'), initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users_user.id'], name=op.f('users_user_user_permissions_user_id_20aca447_fk_users_user_id'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('users_user_user_permissions_pkey')),
    sa.UniqueConstraint('user_id', 'permission_id', name=op.f('users_user_user_permissions_user_id_permission_id_43338c45_uniq'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('users_user_user_permissions_user_id_20aca447'), 'users_user_user_permissions', ['user_id'], unique=False)
    op.create_index(op.f('users_user_user_permissions_permission_id_0b93982e'), 'users_user_user_permissions', ['permission_id'], unique=False)
    op.create_table('auth_permission',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('codename', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['content_type_id'], ['django_content_type.id'], name=op.f('auth_permission_content_type_id_2f476e4b_fk_django_co'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('auth_permission_pkey')),
    sa.UniqueConstraint('content_type_id', 'codename', name=op.f('auth_permission_content_type_id_codename_01ab375a_uniq'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('auth_permission_content_type_id_2f476e4b'), 'auth_permission', ['content_type_id'], unique=False)
    op.create_table('foodgram_recipe_tags',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('recipe_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('tag_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['recipe_id'], ['foodgram_recipe.id'], name=op.f('foodgram_recipe_tags_recipe_id_66e55bc3_fk_foodgram_recipe_id'), initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['tag_id'], ['foodgram_tag.id'], name=op.f('foodgram_recipe_tags_tag_id_5e0c30c1_fk_foodgram_tag_id'), initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('foodgram_recipe_tags_pkey')),
    sa.UniqueConstraint('recipe_id', 'tag_id', name=op.f('foodgram_recipe_tags_recipe_id_tag_id_829d10e0_uniq'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('foodgram_recipe_tags_tag_id_5e0c30c1'), 'foodgram_recipe_tags', ['tag_id'], unique=False)
    op.create_index(op.f('foodgram_recipe_tags_recipe_id_66e55bc3'), 'foodgram_recipe_tags', ['recipe_id'], unique=False)
    op.drop_table('uploaded_files')
    op.drop_table('sections')
    op.drop_table('brandbooks')
    # ### end Alembic commands ###
